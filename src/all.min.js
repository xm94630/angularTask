//自定义函数
function l(){
    console.log.apply(console,arguments)
}
l('angularJS Task');

var xmApp = angular.module("XM",['ui.router','ui.bootstrap',"xmApp.directives","xmApp.services","xmApp.filters","xmApp.controllers","compileExample",'ngMessages']),
    appDirectives = angular.module("xmApp.directives",[]),
    appServices = angular.module("xmApp.services",[]),
    appFilters = angular.module("xmApp.filters",[]),
    appControllers = angular.module("xmApp.controllers",[]);

xmApp
    
    .config(["$httpProvider", function($httpProvider){
        $httpProvider.interceptors.push([
            '$injector',
            function ($injector) {
                return $injector.get('AuthInterceptor');
            }
        ]);
        $httpProvider.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';
        $httpProvider.defaults.headers.post['Content-Type'] = ''
            + 'application/x-www-form-urlencoded; charset=UTF-8';

        $httpProvider.defaults.transformRequest = function(obj){
            var str = [];
            for(var p in obj) {
                str.push(encodeURIComponent(p) + '=' + encodeURIComponent(obj[p]));
            }
            return str.join("&");
        };

    }])

    .constant('AUTH_EVENTS', {
        loginSuccess: 'auth-login-success',
        loginFailed: 'auth-login-failed',
        logoutSuccess: 'auth-logout-success',
        sessionTimeout: 'auth-session-timeout',
        notAuthenticated: 'auth-not-authenticated',//认证
        notAuthorized: 'auth-not-authorized'//合法
    })

    .constant('USER_ROLES', {
        admin: '1',
        common: '0'
    })

    .constant("DOMAIN",{
        "view": "./",
        "version": '?v=20160616'
    })//网站接口前缀变量

    .run(["$rootScope", "$http", "$state", "$stateParams", "$location", "AUTH_EVENTS", "AuthService", function ($rootScope, $http, $state, $stateParams, $location, AUTH_EVENTS, AuthService) {
        $rootScope.$state = $state;
        $rootScope.$stateParams = $stateParams;
        $rootScope.$on('$stateChangeStart', function (event, next, cur) {
            
        });
    }]);
/**
 * Created by zhangchuanliang on 2016/6/16.
 */

xmApp
    .config(["$stateProvider", "$urlRouterProvider", "$httpProvider", "USER_ROLES", "DOMAIN", function($stateProvider, $urlRouterProvider, $httpProvider, USER_ROLES, DOMAIN) {

        $urlRouterProvider.otherwise('/404');
        $stateProvider
            .state('login', {
                url: '/login',
                views: {
                    'mainContent': {
                        templateUrl: './html/module/login.html',
                        controller: 'loginCtrl'
                    }
                }
            })
            .state('home', {
                url: '/home',
                views: {
                    'mainContent': {
                        templateUrl: './html/module/home.html',
                        controller: 'homeCtrl'
                    }
                }
            })
            .state('dashbord',{
                url: '/dashbord',
                resolve: {
                    sidebarList: ["promiseService", function(promiseService){

                    }]
                },
                views: {
                    'mainContent':{
                        templateUrl: DOMAIN.view + 'html/module/dashbord.html' + DOMAIN.version,
                        controller: 'dashbordCtrl'
                    }
                }
            });

    }]);
/**
 * Created by Administrator on 2016/2/18.
 */

appServices.factory('AuthInterceptor', ["$rootScope", "$q", "AUTH_EVENTS", function ($rootScope, $q, AUTH_EVENTS) {
    return {
        responseError: function (response) {
            $rootScope.$broadcast({
                401: AUTH_EVENTS.notAuthenticated,
                403: AUTH_EVENTS.notAuthorized,
                419: AUTH_EVENTS.sessionTimeout,
                440: AUTH_EVENTS.sessionTimeout
            }[response.status], response);
            console.log(response);
            return $q.reject(response);
        }
    };
}]);
/**
 * Created by Administrator on 2016/2/18.
 */

appServices.factory('AuthService', ["$http", "$location", "$rootScope", "Session", "AUTH_EVENTS", "promiseService", "DOMAIN", function ($http, $location, $rootScope, Session, AUTH_EVENTS, promiseService, DOMAIN) {
    var authService = {};

    authService.login = function (credentials) {
        return promiseService.ajax('/api/v1.0/login',"POST",credentials).then(function(res){
            console.log(res);
            if(res.code == 200){
                Session.create(res.data.token, res.data.username, res.list);
            }
            return res;
        });
    };

    authService.logout = function () {
        return promiseService.ajax('/index/loginout',"GET").then(function(res){
            if(res.code == 200){
                Session.destroy();
                $rootScope.$broadcast(AUTH_EVENTS.notAuthenticated);
            }
        });
    };
    authService.isLoginPage = function(){ //是否在登录页
        return ($location.path().indexOf("/login") !== -1)
    };
    authService.isAuthenticated = function () { //有无用户信息
        return !!window.localStorage.userCode;
    };

    authService.isAuthorized = function (page,callback) {
        if(authService.isAuthenticated()){
            if(!this.isLoginPage()){//有用户信息&&不在登录页
                var path = page.name.split(".")[0],
                    funName = path?path:"";
                if(funName == 'manage' && !window.localStorage.manageRole){
                    callback(401)
                }else{
                    callback(200)
                }
            }
        }else{
            callback(401)
        }
        // if (!angular.isArray(authorizedRoles)) {
        //     authorizedRoles = [authorizedRoles];
        // }
        // return (authService.isAuthenticated() &&
        //         (authorizedRoles.indexOf(Session.userRole) !== -1)
        // );
    };
    return authService;
}]);
/**
 * Created by Administrator on 2016/2/16.
 */

appServices.factory('breadNavFactory', ["$location", function($location) {
    return {
        /**
         * 面包屑
         * @param stateParams 当前页的location.search参数
         * @param module 返回网站主的state
         * @returns {Array}
         */
        trans: function(stateParams,module,text) {
            var _text = (typeof text !== 'undefined')?text:"",
                _module = (typeof module !== 'undefined')?module:"";
            var FUN = $location.path().split("/")[1];
            var mediaList = {};
            var storage = window.localStorage;
            if(FUN == "manage"){
                mediaList.media_select = JSON.parse(storage.manageMediaList);
                mediaList.web_select = JSON.parse(storage.manageWebList);
            }else{
                mediaList = JSON.parse(storage.mediaList)
            }
            var result = [];
            //如果没有mid和wid，规定为自定义参数，直接返回
            if(typeof stateParams.mid == 'undefined' && typeof stateParams.wid == 'undefined'){
                result = [stateParams];
                return result
            }
            forMedia:
                for(var k in mediaList["media_select"]){
                    if(k==stateParams.mid){
                        result.push({
                            name: mediaList["media_select"][k],
                            id: k,
                            state: 'manage.medias({mid: '+k+'})'
                        });
                        forWeb:
                            for(var key in mediaList["web_select"][k]){
                                if(key == stateParams.wid){
                                    result.push({
                                        name: mediaList["web_select"][k][key]+_text,
                                        id: key,
                                        state: _module+'({mid: '+k+',wid: '+key+'})'
                                    });
                                    break forWeb
                                }
                            }
                        break forMedia
                    }
                }
            //console.log(result);
            return result;
        }
    };
}]);
/**
 * Created by Administrator on 2016/2/16.
 */

appServices.factory('chainFactory', function() { //暂时没用
    return {
        mid: "",
        wid: "",
        sid: ""
    };
});
/**
 * Created by Administrator on 2016/2/16.
 */

appServices.factory('chartsFactory', function() {
    return {
        //_hasLegend: true,
        //_hasTooltip: true,
        chartTheme: {
            // 默认色板
            color: [
                '#319dca', '#6dbd49', '#ffb85a', '#FD8079', '#61B5FF'
            ],
            // 图表标题
            title: {
                textStyle: {
                    fontWeight: 'normal',
                    color: '#008acd'          // 主标题文字颜色
                }
            },

            legend: {
                icon: 'circle',
                left: 73 //此值参考 grid.left
            },
            
            // 网格
            grid: {
                borderColor: '#F0F0F0',
                backgroundColor: '#fff',
                left: 80, //此值参考 lengend.left
                right: 40,
                top: 40
            },

            // 值域
            dataRange: {
                itemWidth: 15,
                color: ['#5ab1ef', '#e0ffff']
            },

            // 工具箱
            toolbox: {
                color: ['#1e90ff', '#1e90ff', '#1e90ff', '#1e90ff'],
                effectiveColor: '#ff4500'
            },

            // 提示框
            tooltip: {
                backgroundColor: 'rgba(50,50,50,0.5)',     // 提示背景颜色，默认为透明度为0.7的黑色
                axisPointer: {            // 坐标轴指示器，坐标轴触发有效
                    type: 'line',         // 默认为直线，可选为：'line' | 'shadow'
                    lineStyle: {          // 直线指示器样式设置
                        color: '#008acd'
                    },
                    crossStyle: {
                        color: '#008acd'
                    },
                    shadowStyle: {                     // 阴影指示器样式设置
                        color: 'rgba(200,200,200,0.2)'
                    }
                }
            },

            // 区域缩放控制器
            dataZoom: {
                dataBackgroundColor: '#efefff',            // 数据背景颜色
                fillerColor: 'rgba(182,162,222,0.2)',   // 填充颜色
                handleColor: '#008acd'    // 手柄颜色
            },

            // 类目轴
            categoryAxis: {
                axisLine: {            // 坐标轴线
                    lineStyle: {       // 属性lineStyle控制线条样式
                        color: '#008acd'
                    }
                },
                splitLine: {           // 分隔线
                    lineStyle: {       // 属性lineStyle（详见lineStyle）控制线条样式
                        color: ['#eee']
                    }
                }
            },

            // 数值型坐标轴默认参数
            valueAxis: {
                axisLine: {            // 坐标轴线
                    lineStyle: {       // 属性lineStyle控制线条样式
                        color: '#008acd'
                    }
                },
                splitArea: {
                    show: true,
                    areaStyle: {
                        color: ['rgba(250,250,250,0.1)', 'rgba(250,250,250,0.1)']
                    }
                },
                splitLine: {           // 分隔线
                    lineStyle: {       // 属性lineStyle（详见lineStyle）控制线条样式
                        color: ['#eee']
                    }
                }
            },

            polar: {
                axisLine: {            // 坐标轴线
                    lineStyle: {       // 属性lineStyle控制线条样式
                        color: '#ddd'
                    }
                },
                splitArea: {
                    show: true,
                    areaStyle: {
                        color: ['rgba(250,250,250,0.2)', 'rgba(200,200,200,0.2)']
                    }
                },
                splitLine: {
                    lineStyle: {
                        color: '#ddd'
                    }
                }
            },

            timeline: {
                lineStyle: {
                    color: '#008acd'
                },
                controlStyle: {
                    normal: {color: '#008acd'},
                    emphasis: {color: '#008acd'}
                },
                symbol: 'emptyCircle',
                symbolSize: 3
            },

            // 柱形图默认参数
            bar: {
                itemStyle: {
                    normal: {
                        barBorderRadius: 3
                    },
                    emphasis: {
                        barBorderRadius: 3
                    }
                }
            },

            // 折线图默认参数
            line: {
                smooth: true,
                symbol: 'emptyCircle',  // 拐点图形类型
                symbolSize: 3           // 拐点图形大小
            },

            // K线图默认参数
            k: {
                itemStyle: {
                    normal: {
                        color: '#d87a80',       // 阳线填充颜色
                        color0: '#2ec7c9',      // 阴线填充颜色
                        lineStyle: {
                            color: '#d87a80',   // 阳线边框颜色
                            color0: '#2ec7c9'   // 阴线边框颜色
                        }
                    }
                }
            },

            // 散点图默认参数
            scatter: {
                symbol: 'circle',    // 图形类型
                symbolSize: 4        // 图形大小，半宽（半径）参数，当图形为方向或菱形则总宽度为symbolSize * 2
            },

            // 雷达图默认参数
            radar: {
                symbol: 'emptyCircle',    // 图形类型
                symbolSize: 3
                //symbol: null,         // 拐点图形类型
                //symbolRotate : null,  // 图形旋转控制
            },

            map: {
                itemStyle: {
                    normal: {
                        borderColor: 'lightgreen',
                        areaStyle: {
                            color: '#cdd1d2'
                        },
                        label: {
                            textStyle: {
                                color: '#666'
                            }
                        }
                    },
                    emphasis: {                 // 也是选中样式
                        areaStyle: {
                            color: '#67dbff'
                        },
                        label: {
                            textStyle: {
                                color: '#353c55'
                            }
                        }
                    }
                }
            },

            force: {
                itemStyle: {
                    normal: {
                        linkStyle: {
                            color: '#1e90ff'
                        }
                    }
                }
            },

            chord: {
                itemStyle: {
                    normal: {
                        borderWidth: 1,
                        borderColor: 'rgba(128, 128, 128, 0.5)',
                        chordStyle: {
                            lineStyle: {
                                color: 'rgba(128, 128, 128, 0.5)'
                            }
                        }
                    },
                    emphasis: {
                        borderWidth: 1,
                        borderColor: 'rgba(128, 128, 128, 0.5)',
                        chordStyle: {
                            lineStyle: {
                                color: 'rgba(128, 128, 128, 0.5)'
                            }
                        }
                    }
                }
            },

            gauge: {
                axisLine: {            // 坐标轴线
                    lineStyle: {       // 属性lineStyle控制线条样式
                        color: [[0.2, '#2ec7c9'], [0.8, '#5ab1ef'], [1, '#d87a80']],
                        width: 10
                    }
                },
                axisTick: {            // 坐标轴小标记
                    splitNumber: 10,   // 每份split细分多少段
                    length: 15,        // 属性length控制线长
                    lineStyle: {       // 属性lineStyle控制线条样式
                        color: 'auto'
                    }
                },
                splitLine: {           // 分隔线
                    length: 22,         // 属性length控制线长
                    lineStyle: {       // 属性lineStyle（详见lineStyle）控制线条样式
                        color: 'auto'
                    }
                },
                pointer: {
                    width: 5
                }
            },

            textStyle: {
                fontFamily: '微软雅黑, Arial, Verdana, sans-serif'
            }
        },
        init: function (selectorId) {
            if(typeof selectorId == 'undefined')return;
            var $chartsView = document.getElementById(selectorId);//设定高度
            // if (!$chartsView.style.height || $chartsView.style.height =='auto' ) {
            //     $chartsView.style.height = '480px';
            // }
            var _myChart = echarts.init($chartsView);
            _myChart.showLoading({
                text: 'loading',
                color: '#319dca',
                textColor: '#000',
                maskColor: 'rgba(255, 255, 255, 0.8)',
                zlevel: 0
            });
        },
        _formatter: function (value) {
            if (value < 10000) {
                return value;
            }
            value = Math.ceil(value / 1000);
            if (value > 9999) {
                value = Math.ceil(value / 1000) + 'mk';
            } else {
                value += 'k';
            }
            return value;
        },
        _isEmptySeries: function (series) {
            if (!angular.isArray(series) || series.length === 0) {
                return true;
            }
            for (var i = series.length - 1; i >= 0; i--) {
                var data = series[i].data;
                if (!angular.isArray(data) || data.length === 0) {
                    return true;
                }
            }
            return false;
        },
        _getLegend: function (data) {
            var __legendData = [];
            // 获取Y轴项目
            if (this.hasLegend) {
                angular.forEach(data[0].series, function (a,i) {
                    __legendData.push(a.name);
                })
            }

            //翻转
            // if(_legendReverse){
            //     __legendData.reverse()
            // }
            return __legendData;
        },
        noDataView: function(selectorId){
            var $chartsView = document.getElementById(selectorId);
            $chartsView.style = "";
            $chartsView.innerHTML = '<div class="noData">'+
                                    '<span class="emptyBox"></span>'+
                                    '<p>暂无数据</p>'+
                                    '</div>'
        },
        noData: function(data){
            //如果传入的series为空 则在其下添加空值的data
            if(this._isEmptySeries(data.series)){
                data.series.push({
                    data:[]
                });
                data.noDataLoadingOption =  {
                    effect: 'bubble',
                    text: data.title && data.title.text + "暂无数据",
                    textStyle: {
                        fontSize: 14,
                        fontWeight: "bold"
                    }
                };
                //noDataHtml(element,data)
            }
        },
        setViewer: function(selectorId,dataArr,chartsOptions){
            var $chartsView = document.getElementById(selectorId);
            //设定高度
            if (!$chartsView.style.height || $chartsView.style.height =='auto' ) {
                $chartsView.style.height = '480px';
            }
            var _options = [];
            this.hasLegend = chartsOptions.hasLegend == undefined ? true : chartsOptions.hasLegend;
            this.hasTooltip = chartsOptions.hasTooltip == undefined ? true : chartsOptions.hasTooltip;
            this.legendReverse = chartsOptions.legendReverse == undefined ? false : chartsOptions.legendReverse;

            // 判断
            if (!!chartsOptions.chartType && (['custom','pie'].indexOf(chartsOptions.chartType) < 0) ) {
                _options = this.single(chartsOptions.chartType,dataArr,chartsOptions.series,chartsOptions.option);

            }
            if (!!chartsOptions.chartType && chartsOptions.chartType == 'custom') {
                _options = this.custom(chartsOptions.chartType);
            }
            //执行饼状图
            if (!!chartsOptions.chartType && chartsOptions.chartType == 'pie') {
                _options = this.pie(chartsOptions.chartType);
            }
            var myChart = echarts.init($chartsView,this.chartTheme);
            myChart.hideLoading();
            // 使用刚指定的配置项和数据显示图表。
            myChart.setOption(_options);
        },
        single: function (_type,dataArr,_chartSeries,_chartOption) {
            var that = this;
            var __legend = this._getLegend(dataArr),
                __data = dataArr[0];

            //如果传入的series为空 则在其下添加空值的data
            this.noData(__data);

            angular.forEach(__data.series, function (a,i) {
                    a.type = _type;
                    a.areaStyle =  {
                        normal: {
                            opacity: 0.1
                        }
                    };

                if (_type == 'bar' && __data.xAxis[0].type != 'value') {
                        a.barMaxWidth = 100;
                        if (a.data.length < 9 ) {
                           a.barCategoryGap = 50;
                        }
                    }

                    if (_type == 'scatter') {
                        a.itemStyle = {
                            normal: {
                                label: {
                                    textStyle: {
                                        color: '#000'
                                    },
                                    show: true,
                                    position: 'inside',
                                    formatter: '{a}'
                                }
                            }
                        }
                    }
                    //混合图表样式
                    angular.merge(a, _chartSeries)
                }
            );

            var __option = angular.merge({}, {
                legend: {
                    data: __legend
                },
                toolbox: {
                    show: true,
                    feature: {
                        //magicType: {show: true, type: ['line', 'bar']},
                        //restore: {show: true},
                        //dataZoom : {show: false},
                        //saveAsImage: {show: true}
                    },
                    y: 0
                },
                yAxis: [
                    {
                        type: 'value',
                        name: !!_chartOption?_chartOption.yName:'',
                        axisLabel: {
                            //formatter: that._formatter
                        },
                        axisLine: {
                            lineStyle: {
                                color: '#DEE2E5',
                                width: 1
                            }
                        },
                        axisTick: {
                            show: false
                        }
                    }
                ],
                xAxis: [
                    {
                        name: !!_chartOption?_chartOption.xName:'',
                        boundaryGap: false,
                        axisLine: {
                            lineStyle: {
                                color: '#DEE2E5',
                                width: 1
                            }
                        },
                        axisTick: {
                            show: false
                        }
                    }
                ]
            }, __data);
            if (!!this.hasTooltip) {
                __option = angular.merge({},__option, {
                    tooltip: {
                        trigger: 'axis'
                    }
                })
            }
            console.log(__option);
            return __option;
        },
        custom: function (_type,dataArr) {

        },
        pie: function (_type,dataArr) {

        }
    };
});
/**
 * Created by Administrator on 2016/2/16.
 */

appServices.factory('modalFactory', ["$rootScope", "$uibModal", "DOMAIN", function($rootScope,$uibModal,DOMAIN) {
    return {
        opt: {
            option:{
                title: "提示信息",
                content: ""
            },
            hasFooter: true
        },
        commonSet: {
            animation: true,
            backdrop: 'static',
            //windowClass: _opt.className?_opt.className:"layer_common",
            templateUrl: DOMAIN.view+'directive/modal.html',
            windowTemplateUrl: DOMAIN.view+'directive/modalWindow.html'
        },
        open: function(opt) {
            var _opt = angular.extend({}, this.opt, opt),
                openSet = angular.extend({},this.commonSet,{
                    scope: _opt.scope,
                    //bindToController: true,
                    controller: ['$scope','$uibModalInstance',function($scope,$uibModalInstance){
                        //!!_opt.scope?$scope = _opt.scope:"";
                        for(var k in _opt.option){
                            $scope[k] = _opt.option[k]
                        }
                        //console.log($scope);
                        $scope.hasFooter = _opt.hasFooter;
                        $scope.ok= function(){
                            var handler = (_opt.controller && _opt.controller.ok)?_opt.controller.ok():null;
                            if(handler != false){
                                $uibModalInstance.close()
                            }
                        };
                        $scope.cancel= function(){
                            (_opt.controller && _opt.controller.cancel)?_opt.controller.cancel():null;
                            $uibModalInstance.dismiss('cancel');
                        };
                        $scope.close = function(){
                            $uibModalInstance.close()
                        };
                        $scope.size = _opt.size || "common";
                        //console.log($scope);
                    }],
                    //scope: scope,
                    size: _opt.size || "common",//common,small,tips
                    resolve: _opt.resolve || {}
                });
            $uibModal.open(openSet)

        },
        tips: function(code,msg){
            var imgClass = '';
            if(code == 200){
                imgClass = 'succesImg';
            }else{
                imgClass = 'falseImg';
            }
            var openSet = angular.extend({},this.commonSet,{
                controller: ['$scope','$uibModalInstance','$timeout',function ($scope,$uibModalInstance,$timeout) {
                    $scope.content = '<div class="tipsPop">'+
                                        '<span class="'+imgClass+'"></span>'+
                                        '<span class="infPop">'+msg+'</span>'+
                                        '</div>';
                    $scope.size = 'tips';
                    $scope.hasFooter = false;
                    $timeout(function(){
                        $uibModalInstance.close()
                    },1000);
                }],
                size: "tips",
                backdrop: true,
                hasFooter: false
            });
            $uibModal.open(openSet)
        }
    };
}]);
/**
 * Created by Administrator on 2016/2/18.
 */

appServices.factory('patternService', function () {
    return {
        char: function(){
            return  new RegExp(/^(([^\^\.<>%&',;=?$"':#@!~\]\[{}\\/`\|])*)$/);
        }
    }
});
/**
 * Created by zhangchuanliang on 2016/6/17.
 */

appServices.factory('promiseService', ["$rootScope", "$http", "$q", "$timeout", "AUTH_EVENTS", "DOMAIN", function ($rootScope,$http, $q, $timeout, AUTH_EVENTS, DOMAIN) {
    var suggestion = new Object();
    suggestion.ajax = function(url,_method,_data, config) {
        
        //$http.defaults.headers.common['token'] = window.localStorage.userCode || "";
        $http.defaults.headers.common['token'] = "eyJhbGciOiJIUzI1NiIsImV4cCI6MTQ2NjgwMzgxMywiaWF0IjoxNDY2NzY3ODEzfQ.eyJpZCI6MjZ9.bgtdqz5DMIuCdYww8oSROOu97Hu_zU90mIZTQxjI1ng";
        console.log('==>')
        console.log($http.defaults.headers.common['token'])

        var deferred = $q.defer();
        var opt = angular.extend({},{
            url: url,
            method: _method
        },!!config?config:{});
        if(_method.toLowerCase() == 'post'){
            opt["data"] = _data;
        }else{
            opt["params"] = _data;
        }
        $http(opt).then(function(res){
            var _res = res;
            if(_res.code == 401){
                $rootScope.$broadcast(AUTH_EVENTS.notAuthenticated);
                return $q.reject(_res);
            }else {
                deferred.resolve(_res);
            }
        },function (error) {
            return $q.reject(error);
        });
        return deferred.promise;
    };
    return suggestion;
}]);
/**
 * Created by Administrator on 2016/2/18.
 */

appServices.service('Session', function () {
    var storage = window.localStorage;
    this.userCode = storage.userCode || null;
    this.userName = storage.userName || null;
    this.userRole = storage.userRole || null;
    this.create = function (userCode, userName, userRole) {
        this.userCode = userCode;
        this.userName = userName;
        this.userRole = userRole;
        storage.setItem("userCode",userCode);
        storage.setItem("userName",userName);
        storage.setItem("userRole",JSON.stringify(userRole));
    };
    this.destroy = function () {
        this.userCode = null;
        this.userName = null;
        this.userRole = null;
        storage.removeItem("userCode");
        storage.removeItem("userName");
        storage.removeItem("userRole");
    };
    //return this;
});
/**
 * Created by Administrator on 2016/2/16.
 */

appServices.factory('tableFilterFactory', ["$sce", function($sce) {
    return function(data, th, page, filter, isFilter) {
        if (!angular.isArray(data.list)) {
            data.tdData = data.list;
            data.array = false;
            setThData();
            // console.log(data);
            return data;
        } else {
            // console.log(data);
            data.array = true;
            var _startNum = (page.currentPage - 1) * page.pageSize;

            var _data = getFilterData();
            if (_data.length == 0) {
                data.array = false;
                data.tdData = '当前筛选没有任务';
            } else {
                var _dataActive = [];
                var _size = page.total - _startNum > page.pageSize ? page.pageSize : page.total - _startNum;
                for (var i = 0; i < _size; i++) {
                    _dataActive.push(_data[_startNum + i]);
                };
                setTdData(_dataActive);
            }
            setThData();

            return data;
        }

        function setThData() {
            var _num = Object.keys(th);
            var _th = [];
            for (var i = 0; i < _num.length; i++) {
                _th.push(th[_num[i]]);
            };
            // console.log(data);
            data.thData = _th;
        }

        function setTdData(tdlist) {
            var _tdData = [];
            var _thTitle = Object.keys(th);
            for (var i = 0; i < tdlist.length; i++) {
                var _obj = [];
                for (var j = 0; j < _thTitle.length; j++) {
                    // _obj.push($sce.trustAsHtml(tdlist[i][_thTitle[j]]));
                    _obj.push(tdlist[i][_thTitle[j]]);
                };
                _tdData.push(_obj);
            };
            data.tdData = _tdData;
        }

        function getFilterData() {
            if (filter.select == '' || filter.input == '') {
                page.total = data.list.length;
                return data.list;
            }
            var _list = [];
            for (var i = 0; i < data.list.length; i++) {
                var _reg = new RegExp(filter.input, 'g');
                // 完全匹配
                // if(data.list[i][filter.select]== filter.input){

                // 模糊匹配
                if (data.list[i][filter.select].match(_reg) != null) {
                    _list.push(data.list[i]);
                }
            };
            if (isFilter) {
                page.currentPage = 1;
            }
            page.total = _list.length;

            return _list;
        }
    }
}]);
/**
 * Created by Administrator on 2016/2/18.
 */

appServices.factory('tableFunctionFactory', ["$compile", function ($compile) {
    return {
        set: function(data,widths){
            for(var i=0;i<data.length;i++){
                data[i].width = widths[i]
            }
            return data
        },
        noData: function(module){
            module.data.array = false;
            module.data.tdData = '<div class="noData">'+
                                        '<span class="emptyBox"></span>'+
                                        '<p>暂无数据</p>'+
                                    '</div>';
            return false
        }
    }
}]);
/**
 * Created by Administrator on 2016/2/18.
 */

appServices.factory('transSidebarData', ["$location", function ($location) {
    return {
        /**
         * 转换左导数据格式
         * @param data 数据
         * @param module 跳转页面state
         * @param ids 传入的mid和wid
         * @param activeItem 当前访问的url的唯一标识 如 website_index
         * @returns {*}
         */
        trans: function(data){
            var newData = [];
            for(var i=0;i<data.length;i++){
                newData[i] = {
                    name: data[i].pera_chi,
                    state: data[i].pera_eng,
                    child: []
                }
                var child = data[i].child || [],
                    newChild = newData[i].child;
                for(var j=0;j<child.length;j++){
                    newChild[j] = {
                        name: child[j].pera_chi,
                        state: data[i].pera_eng+"."+child[j].pera_eng
                    }
                }
            }
            //console.log(newData);
            return newData
        }
    }
}]);
/**
 * Created by Administrator on 2016/2/18.
 */

appServices.factory('transformDataService', ["$compile", function ($compile) {
    return {
        _isArray: function (object) {
            return Object.prototype.toString.call(object) === '[object Array]';
        },
        _isObject: function (object) {
            return typeof object === 'object';
        },
        escape2Html: function (str) {
            var arrEntities={'lt':'<','gt':'>','nbsp':' ','amp':'&','quot':'"','#039':"'"};
            return str.replace(/&(lt|gt|nbsp|amp|quot|#039);/ig,function(all,t){return arrEntities[t];});
        },
        html2Escape: function (sHtml) {
            if(typeof sHtml != 'string')return sHtml;
            return sHtml.replace(/[<>&"']/g,function(c){return {'<':'&lt;','>':'&gt;','&':'&amp;','"':'&quot;',"'":"&#039;"}[c];});
        },
        tempReplace: function (template, obj, loc) {
            var _loc = (loc == 'i' || loc == 'g') ? loc : 'g',
                _temp = template;
            for (var _key in obj) {
                var _ex = new RegExp('{{{' + _key + '}}}', _loc);
                _temp = _temp.replace(_ex, obj[_key])
            }
            return _temp;
        },
        trans: function(options,_width){
            var list = options.list,
                keys = options.keys,
                newData = [];
            for(var i=0;i<list.length;i++){
                var sData = list[i],
                    loopArr = [];
                for(var j=0;j<keys.length;j++){
                    //todo 此处可优化
                    if(this._isArray(keys[j])){//数组的话 代表此处可能是多个参数拼合为一个值进行显示
                        var str = {};
                        for(var m=0;m<keys[j].length;m++){
                            if(sData[keys[j][m]] == "有效"){
                                str.value = sData[keys[j][m]];
                                break;
                            }else{
                                str.value = sData[keys[j][0]]+"<i>("+sData[keys[j][1]]+")</i>"
                            }
                        }
                        loopArr.push(str)
                    }else if(this._isObject(keys[j])){ //对象的话 代表此处需要多个参数进行调用 经常用于图片预览
                        var _value = this.tempReplace(keys[j]["value"],sData,'g'),
                            _img = this.tempReplace(keys[j]["url"],sData,'g'),
                            _extend = {value: _value,url: _img};
                        loopArr.push(_extend)
                    }
                    //此处可优化 end
                    else{ //不需要做特殊处理的操作
                        if(keys[j].indexOf("<") < 0){
                            loopArr.push({value: sData[keys[j]],width: !!_width?_width[j]:"auto" })
                        }else{
                            var temp = this.tempReplace(keys[j],sData,'g');
                            loopArr.push({value: temp,width: !!_width?_width[j]:"auto" })
                        }
                    }

                }
                newData.push(loopArr)
            }
            //console.log(newData);
            return newData
        },
        formatDate: function(list,date){
            for(var i=0;i<list.length;i++){
                list[i][date] = encodeURIComponent(list[i][date])
            }
            return list;
        }
    }
}]);
/**
 * Created by Administrator on 2016/2/18.
 */

appServices.factory('transformTo', ["$compile", function ($compile) {
    return {
        get: function(obj){
            var str = [];
            for(var p in obj) {
                str.push(encodeURIComponent(p) + '=' + encodeURIComponent(obj[p]));
            }
            return str.join("&");
        },
        
    }
}]);
/**
 * Created by Administrator on 2016/1/28.
 */
appDirectives.directive("breadNav",function(){
    return {
        restrict: 'AE',
        template: '<div class="AT_title">'+
                        '<span ng-repeat="item in breadList">'+
                            '<a ng-if="sref" ui-sref="{{item.state}}">{{item.name}}</a> '+
                            '<span ng-if="!sref">{{item.name}}</span> '+
                        '</span>'+
                        '<span ng-if="breadList.length > 0" class="iconRight">&gt; </span>'+
                        '<span>{{title}}</span>'+
                    '</div>',
        replace: true,
        link: function (scope, element, attr) {
            //console.log(scope);
            // scope.sref 在各自模块父级view的controller里设置（reportCtrl、manageCtrl）
        }
    }
});
/**
 * Created by Administrator on 2016/1/28.
 */
appDirectives.directive("cgSortDirective", ["modalFactory", "DOMAIN", function(modalFactory, DOMAIN) {
    return {
    	scope:{
    		cgSortValue:'='
    	},
        restrict: 'AE',
        templateUrl: DOMAIN.view+"directive/sortTable.html"+DOMAIN.version,
        replace: true,
        link: function(scope, element, attrs) {
            scope.changeIndex = function(newI, oldI) {
                if(scope.cgSortValue.list.length == 1) return;
                var _oldItem = scope.cgSortValue.list.splice(oldI, 1);
                if (newI == -1) return;
                scope.cgSortValue.list.splice(newI, 0, _oldItem[0]);
                //console.log(scope);
            };
            scope.addItem = function() {
            	if(scope.cgSortValue.list.length >= 5) {
                    //modalFactory.tips(201,'最多添加5项');
                    return;
                }
                scope.cgSortValue.list.push({
                    'title': 'url',
                    'condition': '0',
                    'content': '',
                    'criteria': '0'
                });
            }
        }
    }
}]);

/**
 * Created by Administrator on 2016/1/28.
 */
appDirectives.directive("cgSortItemDirective", ["DOMAIN", function(DOMAIN) {
    return {
        scope: {
            'itemData': '=',
            'itemIndex': '=',
            'itemLast': '=',
            'changeIndex': '=',
            'itemInit':'='
        },
        restrict: 'AE',
        templateUrl: DOMAIN.web + "/modules/tpl/sortTableItem.html",
        replace: true,
        link: function(scope, element, attrs) {
            // scope.title = scope.itemInit.title;
            // scope.condition = scope.itemInit.condition;
            scope.up = function() {
                var _index = Number(scope.itemIndex) - 1;
                if (_index < 0) return;
                scope.changeIndex(_index, Number(scope.itemIndex));
            };
            scope.down = function() {
                var _index = Number(scope.itemIndex) + 1;
                scope.changeIndex(_index, Number(scope.itemIndex));
            };
            scope.del = function() {
                scope.changeIndex(-1, Number(scope.itemIndex));
            };
            scope.radio = {
                value: 0
            };

            scope.$watch('itemIndex', function() {
                scope.index = Number(scope.itemIndex) + 1;
            });

            scope.$watch('radio', function() {
                scope.itemData.criteria = scope.radio.value;
            }, true);

            scope.$watch('content', function() {
                scope.itemData.content = scope.content;
            });

            //编缉回填数据
            function init(){
            	scope.conditionSelect = [scope.itemData.condition];
            	scope.titleSelect = [scope.itemData.title];
            	scope.content = scope.itemData.content;
            	scope.radio.value = scope.itemData.criteria || 0;
            }
            init();

            scope.titleChange = function(label, value) {
                scope.itemData.title = value[0];
            };
            scope.conditionChange = function(label, value) {
                scope.itemData.condition = value[0];
            }
        }
    }
}]);

appDirectives.directive('chosenDirective', ["$timeout", "DOMAIN", function($timeout,DOMAIN) {
        return {
            scope: {
                'setSelected': '=',
                'changeFunction': '=',
                'chosenData': '='
            },
            restrict: 'A', // E = Element, A = Attribute, C = Class, M = Comment
            templateUrl: DOMAIN.view+"directive/chosen.html"+DOMAIN.version,
            transclude: true,
            compile: function(tEle, tAttr, transcludeFn) {
                return function(scope, element, attrs) {
                    var _defaultResult = [];
                    scope.isOpen = false;
                    //是否显示搜索
                    scope.chosenSearch = !attrs['isHaveSearch'];
                    //是否单选
                    scope.isSingle = !attrs['isMulit'] || false;

                    var selectedDom = [],
                        selectedClass = 'highlighted';

                    scope.mouseover = function(e) {
                        if (optionStatus(angular.element(e.target))) return;
                        angular.element(e.target).addClass('highlighted');
                    }
                    scope.mouseleave = function(e) {
                        if (optionStatus(angular.element(e.target))) return;
                        angular.element(e.target).removeClass('highlighted');
                    }
                    scope.clickoption = function(e) {
                        if (optionStatus(angular.element(e.target))) return;
                        //重置
                        scope.searchVal = '';
                        scope.results = _defaultResult;

                        setSelected(angular.element(e.target));
                        scope.isOpen = false;
                    }

                    scope.openDrop = function() {
                        scope.isOpen = !scope.isOpen;
                    }

                    scope.searchOption = function(val) {
                        var _list = [];
                        var _reg = new RegExp(val, 'g');

                        for (var i = 0; i < _defaultResult.length; i++) {
                            if (_defaultResult[i].label.search(_reg) != -1) {
                                _list.push(_defaultResult[i]);
                            }
                        }
                        scope.results = _list;
                    }


                    scope.removeSelected = function(index, e) {
                        e.stopPropagation();
                        selectedDom[index].removeClass('result-selected');
                        selectedDom.splice(index, 1);
                        scope.currentOption.splice(index, 1);
                        changeFunctions();
                    }

                    function optionStatus(dom) {
                        var _result = false;
                        if (dom.hasClass('group-result') || dom.hasClass('result-selected')) {
                            _result = true;
                        }
                        return _result;
                    }

                    function setSelected(dom) {
                        var _selected,
                            _dom,
                            _val = dom.text();
                        dom.removeClass('highlighted');
                        if (attrs['isMulit']) {
                            _selected = scope.currentOption;
                            _dom = selectedDom;
                            selectedDom.push(dom);
                            _selected.push(_val);
                        } else {
                            _selected = _val;
                            if (selectedDom.length != 0) {
                                selectedDom[0].removeClass('highlighted');
                            }
                            selectedDom = [dom];
                        }
                        scope.currentOption = _selected;
                        changeFunctions();
                    }

                    function getSelectedValue() {
                        var _val = [];
                        for (var i = 0; i < selectedDom.length; i++) {
                            _val.push(selectedDom[i].attr('data-value'));
                        }
                        return _val;
                    }

                    function changeFunctions() {
                        var _cur = scope.currentOption;
                        if (angular.isFunction(scope.changeFunction)) {
                            scope.changeFunction(_cur, getSelectedValue());
                        }
                        scope.$emit('chosenChange', scope.currentOption, getSelectedValue());
                    }

                    function createDom() {
                        transcludeFn(scope, function(clone) {
                            var _results = [];
                            if(clone.length == 0){
                                return;
                            }
                            for (var i = 0; i < clone.length; i++) {
                                if (clone[i].nodeType == 1) {
                                    if (clone[i].tagName == 'OPTGROUP') {
                                        _results.push({
                                            label: clone[i].label,
                                            group: 'title'
                                        });
                                        if (clone[i].children.length > 0) {
                                            for (var j = clone[i].children.length - 1; j >= 0; j--) {
                                                _results.push({
                                                    label: clone[i].children[j].label,
                                                    group: 'option',
                                                    value: clone[i].children[j].value
                                                });

                                            }
                                        }
                                    } else {
                                        _results.push({
                                            label: clone[i].label,
                                            group: 'none',
                                            value: clone[i].value
                                        })
                                    }
                                }
                            }
                            _defaultResult = _results;
                            scope.results = _results;
                            scope.currentOption = clone[1].label;
                        });
                    }

                    function setChosenSelected() {
                        if (scope.setSelected != undefined && scope.setSelected.length != 0) {
                            var _option = element[0].querySelectorAll('.chosen-results li');
                            var index = 0;
                            setFor:
                            for (var j = 0; j < scope.setSelected.length; j++) {
                                for (var i = 0; i < _option.length; i++) {
                                    if (angular.element(_option[i]).attr('data-value') == scope.setSelected[j]) {
                                        setSelected(angular.element(_option[i]));
                                        index++;
                                        break setFor;
                                    }
                                }
                            }
                            if(index <= 0){
                                setSelected(angular.element(_option[0]));
                            }
                        }
                    }

                    function addWatch() {

                        var _body = angular.element(document.getElementsByTagName('body'));

                        scope.$watch('isOpen', function() {
                            for (var i = 0; i < selectedDom.length; i++) {
                                selectedDom[i].addClass(selectedClass);
                            }
                            if (scope.isOpen == true) {
                                $timeout(function() {
                                    _body.bind('click', function(e) {
                                        var _parent = angular.element(e.target);
                                        for (var i = 0; i < 5; i++) {
                                            if(_parent.parent().length == 0){
                                                break
                                            }
                                            if(element[0] == _parent.parent()[0]){
                                                return false
                                            }else{
                                                _parent=_parent.parent();
                                            }
                                        }
                                        scope.$apply(function() {
                                            scope.isOpen = false;
                                        });
                                    });
                                },10);
                            } else {
                                _body.unbind('click');
                            }
                        })

                        if (attrs['isMulit']) {
                            scope.currentOption = [];
                            selectedDom = [];
                            selectedClass = 'result-selected';
                            // scope.multiValue = '请选择一些选项';
                            scope.$watch('currentOption.length', function() {
                                if (scope.currentOption.length != 0) {
                                    scope.multiValue = '';
                                    scope.multiwidth = '25px';
                                } else {
                                    scope.multiValue = '请选择一些选项';
                                    scope.multiwidth = 'auto';
                                }
                            })
                        }

                        scope.$watch('setSelected', function() {
                            $timeout(setChosenSelected, 20);
                        })

                    }

                    function init() {
                        // console.log(scope.chosenData)
                        if (scope.chosenData != undefined) {
                            _defaultResult = scope.chosenData;
                            scope.results = scope.chosenData;
                            scope.currentOption = scope.chosenData[0].label;
                            scope.$watch('chosenData',function(){
                                _defaultResult = scope.chosenData;
                                scope.results = scope.chosenData;
                                scope.currentOption = scope.chosenData[0].label;
                            })
                        } else {
                            createDom();
                        }
                        addWatch();
                    }

                    init();
                };
            },
            replace: true
        };
    }])

/**
 * Created by Administrator on 2016/2/16.
 */
angular.module('compileExample', [], ["$compileProvider", function($compileProvider) {
    // configure new 'compile' directive by passing a directive
    // factory function. The factory function injects the '$compile'
    $compileProvider.directive('compile', ["$compile", function($compile) {
        // directive factory creates a link function
        return function(scope, element, attrs) {
            scope.$watch(
                function(scope) {
                    // watch the 'compile' expression for changes
                    return scope.$eval(attrs.compile);
                },
                function(value) {
                    // when the 'compile' expression changes
                    // assign it into the current DOM
                    element.html(value);
                    // compile the new DOM and link it to the current
                    // scope.
                    // NOTE: we only compile .childNodes so that
                    // we don't get into infinite loop compiling ourselves
                    $compile(element.contents())(scope);
                }
            );
        };
    }]);
}]);
appDirectives.directive('datepickerDirective', ["$timeout", "$filter", "DOMAIN", function($timeout, $filter, DOMAIN) {
        return {
            restrict: 'AE', // E = Element, A = Attribute, C = Class, M = Comment
            templateUrl: DOMAIN.view+"directive/datePicker.html"+DOMAIN.version,
            replace: true,
            link: function($scope, iElm, iAttrs, controller) {

                //dad
                $scope.startTimeOptions = {
                    maxDate: new Date(),
                    minDate: new Date(2014, 0, 1),
                    startingDay: 1,
                    showWeeks: false
                };
                $scope.startTime = {
                    opened: false
                };
                $scope.openStartTime = function() {
                    $scope.startTime.opened = true;
                };

                $scope.$watch('startTimeV', function(newValue, oldValue) {
                    if (newValue == undefined || isEqual(newValue, oldValue)) return;
                    $scope.endTimeOptions.minDate = newValue;
                    setSelect();
                });
                $scope.endTimeOptions = {
                    maxDate: new Date(),
                    minDate: new Date(2014, 0, 1),
                    startingDay: 1,
                    showWeeks: false
                };
                $scope.endTime = {
                    opened: false
                };
                $scope.openendTime = function() {
                    $scope.endTime.opened = true;
                };
                $scope.$watch('endTimeV', function(newValue, oldValue) {
                    if (newValue == undefined || isEqual(newValue, oldValue)) return;
                    $scope.startTimeOptions.maxDate = newValue;
                    setSelect();
                });

                //$scope.dateType = ['lastday7'];
                $scope.chosenChanges = function(label, value) {
                    switch (value[0]) {
                        case 'today':
                            setTime(getLastday(1));
                            break;
                        case 'yesterday':
                            setTime(theLastday(1));
                            break;
                        case 'lastday7':
                            setTime(getLastday(7));
                            break;
                        case 'lastday15':
                            setTime(getLastday(15));
                            break;
                        case 'thisMonth':
                            setTime(getMonth(0));
                            break;
                        case 'lastMonth':
                            setTime(getMonth(-1));
                            break;
                        case 'thisYear':
                            setTime(getThisYear());
                            break;
                        default:
                            break;
                    }
                };

                var _now = new Date();
                var _dayList = {
                    'today': getLastday(1),
                    'yesterday': theLastday(1),
                    'lastday7': getLastday(7),
                    'lastday15': getLastday(15),
                    'thisMonth': getMonth(0),
                    'lastMonth': getMonth(-1),
                    'thisYear': getThisYear()
                };
                var _timer;

                function setSelect() {
                    if (_timer != undefined) {
                        $timeout.cancel(_timer);
                    }
                    _timer = $timeout(function() {
                        var _isCustom = true;
                        var _option = '';
                        for (var key in _dayList) {
                            if (isEqual(_dayList[key][0], $scope.startTimeV) && isEqual(_dayList[key][1], $scope.endTimeV)) {
                                _isCustom = false;
                                _option = key;
                                break;
                            }
                        }
                        if (_isCustom) {
                            $scope.dateType = ['custom'];
                        } else {
                            $scope.dateType = [_option];
                        }

                    }, 100)
                }

                function setTime(value) {
                    $scope.startTimeV = value[0];
                    $scope.endTimeV = value[1];
                }
                //获取今年
                function getThisYear() {
                    var _s = new Date(_now.getFullYear(), 0, 1);
                    var _e = _now;
                    return [_s, _e];
                }

                // 返回过去value个月
                function getMonth(value) {
                    var _sMonth = _now.getMonth() + value;
                    var _sYear = _now.getFullYear();
                    if (_sMonth < 0) {
                        _sMonth = 11;
                        _sYear = _sYear - 1;
                    }
                    var _lastDay = getCountDays(new Date(_sYear + '/' + (_sMonth + 2) + '/1'));

                    var _s = new Date(_sYear, _sMonth, 1);
                    if (value == 0) {
                        var _e = _now;
                    } else {
                        var _e = new Date(_sYear, _sMonth, _lastDay);
                    }
                    return [_s, _e];
                }

                // 获取过去value天
                function getLastday(value) {
                    var _s = new Date(_now.getTime() - transTime(value-1));
                    var _e = _now;
                    return [_s, _e];
                }

                // 获取过去value天的某一天
                function theLastday(value) {
                    var _s = new Date(_now.getTime() - transTime(value));
                    return [_s, _s];
                }

                //返回当月有多少天
                function getCountDays(date) {
                    date.setDate(0);
                    return date.getDate();
                }

                function transTime(num) {
                    return 1000 * 60 * 60 * 24 * num;
                }

                function isEqual(date1, date2) {
                    if(date1 == undefined || date2 == undefined){
                        return false;
                    }
                    return (date1.getFullYear() == date2.getFullYear() && date1.getMonth() == date2.getMonth() && date1.getDate() == date2.getDate())
                }
            }
        };
    }]);

/**
 * Created by Administrator on 2016/1/28.
 */
appDirectives.directive("dimensChange", ["DOMAIN", function(DOMAIN) {
    return {
        restrict: 'AE',
        templateUrl: DOMAIN.web + "/modules/tpl/dimensChange.html",
        replace: true,
        link: function(scope, element, attrs) {
            scope.singleCont = false;
            //自定义维度
            scope.showDimens = false;
            scope.dimensFun = {
                toggle: function(){
                    scope.showDimens = !scope.showDimens
                },
                clean: function(){
                    scope.dimens.selected = [];
                    for(var i=0;i<scope.dimens.items.length;i++){
                        scope.dimens.items[i].checked = false;
                    }
                    this.toggle()
                },
                submit: function(){
                    scope.search();
                    this.toggle()
                }
            };
            //维度选择
            scope.dimens.change = function (index, key) {
                if(scope.dimens.items[index].checked){
                    scope.dimens.selected.push(key);
                    if(scope.dimens.selected.length > 5){
                        scope.dimens.selected.pop();
                        scope.dimens.items[index].checked = false;
                        scope.dimens.maxTips = true;
                    }
                }else{
                    scope.dimens.selected.splice(scope.dimens.selected.indexOf(key),1);
                    scope.dimens.maxTips = false;
                }
                console.log(scope.dimens.selected);
            };

            //多项目浮层
            scope.showProjects = false;
            scope.projectFun = {
                toggle: function(){
                    scope.showProjects = !scope.showProjects
                },
                clean: function(){
                    scope.projects.selected = [];
                    for(var i=0;i<scope.projects.items.length;i++){
                        scope.projects.items[i].checked = false;
                    }
                    this.toggle()
                },
                submit: function(){
                    scope.search();
                    this.toggle()
                }
            };

            //全部站点选择单一维度 下拉
            scope.dimensChange = function(label,value){
                scope.dimens.selected = value;
                scope.search();
            };
            
            scope.projects.checkBoxChange = function(index,key){//自定义站点
                if(scope.projects.selected.indexOf(0)>=0 || scope.projects.selected.indexOf('0')>=0){
                    scope.projects.selected.shift()
                }
                if(scope.projects.items[index].checked){
                    scope.projects.selected.push(key);
                    if(scope.projects.selected.length > 5){
                        scope.projects.selected.pop();
                        scope.projects.items[index].checked = false;
                        scope.projects.maxTips = true;
                    }
                }else{
                    scope.projects.selected.splice(scope.projects.selected.indexOf(key),1);
                    scope.projects.maxTips = false;
                }
                console.log(scope.projects.selected);
            }
        }
    }
}]);

appDirectives.directive('mouseWheel', function() {
    return function(scope, elm, attr) {
        var raw = elm[0];
        elm.bind('mousewheel', function(e) {
            var _div = angular.element(this),
                _children = _div.children();

            var _Height = _children[0].offsetHeight - _div[0].offsetHeight;

            var _timer, speed;

            var _cTop = _div[0].scrollTop;

            if (e.wheelDelta < 0) {
                speed = 5;
            } else if(e.wheelDelta > 0) {
                speed = -5;
            }else{
            	speed = 0;
            }

            _cTop = _cTop + speed;

            if (_cTop < 0) {
                _cTop = 0;
            } else if (_cTop > _Height) {
                _cTop = _Height;
            } else {
                e.preventDefault();
            }

            _div[0].scrollTop = _cTop;
        });
    };
});

appDirectives.directive('paginationSize', function() {
    return {
        scope: {
            pagination: "=pageInfo"
        },
        restrict: 'AE', // E = Element, A = Attribute, C = Class, M = Comment
        template: '<div class="pagination_length">每页显示 '+
                        '<select chosen-directive class="chosen" change-function="pagination.sizeChange" set-selected="initSize">'+
                        '<option value="5">5</option>'+
                        '<option value="10">10</option>'+
                        '<option value="20">20</option>'+
                        '<option value="50">50</option>'+
                        '<option value="100">100</option>'+
                    '</select> 条记录'+
                '</div>',
        link: function(scope, element, attr){
            scope.initSize= ['20'];
        }
    }
});

/**
 * Created by zhangchuanliang on 2016/6/20.
 */
appDirectives.directive("sidebarNav",["DOMAIN", function(DOMAIN){
    return {
        restrict: 'AE',
        templateUrl: DOMAIN.view+"directive/sidebar.html"+DOMAIN.version,
        replace: true,
        link: function (scope, element, attr) {
            //console.log(scope);
        }
    }
}]);
/**
 * Created by Administrator on 2016/2/15.
 */
appDirectives.directive('tableDirective', ["DOMAIN", function(DOMAIN) {
    return {
        scope: {
            table: "=tableData",
            tableFn: "=tableFunction",
            class: '@class'
        },
        restrict: 'AE',
        templateUrl: DOMAIN.view+"directive/table.html"+DOMAIN.version,
        replace: true,
        link: function(scope,element,attr){
            //console.log(scope)
            if (angular.isArray(scope.table.tdData)) {
                scope.table.array = true;
            }
            var ths = scope.table.thData[0];
            //查找已有的筛选项（lastIndex）
            for(var i=0;i<ths.length;i++){
                if(ths[i].class && ths[i].class.indexOf("sorting_")>=0){
                    scope.tableFn.lastIndex = i;
                    break;
                }
            }
            scope.tableFn.sort = function(index){
                var item = ths[index];
                var className = item.class,
                    sortName = item.sortname;
                if(!sortName)return;
                if(typeof scope.tableFn.lastIndex != 'undefined'){
                    ths[scope.tableFn.lastIndex].class = 'sorting';
                }
                if(className == 'sorting_desc'){//当前倒序，请求正序接口
                    item.class = 'sorting_asc';
                }else{//当前正序，请求倒序接口
                    item.class = 'sorting_desc';
                }
                scope.$parent.tableParams.sort_order = item.class.split("_")[1];
                scope.$parent.tableParams.sort_name = sortName;
                scope.tableFn.lastIndex = index;
                scope.tableFn.sortChange(index);
            };

            var tdLens = scope.table.thData[0].length;
            scope.tableFn.tableadd = function(index,id,event){
                var element = angular.element(event.target);
                if(element.hasClass("icon-add")){
                    element.removeClass("icon-add");
                    element.addClass("icon-delete2");
                    scope.table.tdData.splice(index+1,0,[{"colspan":tdLens,"class":"table table-bordered","children":[[{value:"数据加载中","colspan":tdLens,"class": "text-center"}]]}]);
                    scope.tableFn.showDetail(index,id)
                }else{
                    element.addClass("icon-add");
                    element.removeClass("icon-delete2");
                    scope.table.tdData.splice(index+1,1)
                }
            }
        }
    };
}]);
/**
 * Created by Administrator on 2016/2/15.
 */
appDirectives.directive('tooltipsDirective', ["DOMAIN", function(DOMAIN) {
    return {
        restrict: 'AE',
        templateUrl: DOMAIN.view+"directive/tooltips.html"+DOMAIN.version,
        replace: true,
        link: function(scope, element, attrs){
            //console.log(element);
            scope.tooltips.switch = false;
            scope.tooltips.toggle = function(){
                scope.tooltips.switch = !scope.tooltips.switch;
            };
        }
    };
}]);
/**
 * Created by Administrator on 2016/1/28.
 */
appDirectives.directive("topBar",["$rootScope", "$location", "$state", "$stateParams", "AuthService", "Session", "DOMAIN", function($rootScope, $location, $state, $stateParams, AuthService, Session, DOMAIN){
    return {
        restrict: 'AE',
        templateUrl: DOMAIN.view+"directive/topbar.html"+DOMAIN.version,
        replace: true,
        link: function(scope, element, attrs){
            /**
             * 登录后，Session会被赋值用户信息，并写入localStorage
             * 但是，用户没有关闭浏览器标签，并刷新页面后，Session的数据会消失
             * 此时，需要从Storage里去取用户信息，来进行身份验证
             * topbar和applicationController为同一作用域
             */
            var storage = window.localStorage;

            scope.logout = function(){
                AuthService.logout()
            };

        }//link end
    }
}]);
/**
 * Created by Administrator on 2016/1/27.
 */
appControllers.controller("ApplicationController",["$scope", "$state", "$stateParams", "$rootScope", "$location", "AUTH_EVENTS", "Session", "modalFactory", "transformTo", "transSidebarData", "promiseService", function($scope, $state, $stateParams, $rootScope, $location, AUTH_EVENTS, Session, modalFactory,transformTo,transSidebarData,promiseService){

    $scope.isLogin = !!Session.userCode;
    $scope.username = Session.userName;

    var goLogin = function(){
        Session.destroy();
        $scope.isLogin = false;
        $state.go('login');
    };
    var noAuthorized = function(){
        modalFactory.tips(201,"无权限访问");
    };

    //var storage = window.localStorage;

    var loginSuccess = function(){
        $scope.setCurrentUser(); //记录用户信息
        $scope.getSidebar();
        $state.go("dashbord");
        //$location.url('/report/rweb_index/?mid='+$rootScope.mid+'&wid='+$rootScope.wid);
    };

    $scope.$on(AUTH_EVENTS.notAuthenticated, goLogin);//未登录
    $scope.$on(AUTH_EVENTS.notAuthorized, noAuthorized);//无权限
    $scope.$on(AUTH_EVENTS.sessionTimeout, goLogin);//过期
    $scope.$on(AUTH_EVENTS.loginSuccess, loginSuccess);//成功

    /**
     * 记录用户信息
     */
    $scope.setCurrentUser = function(){
        $scope.isLogin = !!Session.userCode;
        $scope.username = Session.userName;
        $scope.userrole = Session.userRole;
    };

    /**
     * 获取左导列表
     */
    $scope.getSidebar = function(){
        var storage = window.localStorage;
        promiseService.ajax('/api/v1.0/action_permission_all','get',{"token": storage.userCode||""}).then(function(res){
            console.log(res);
            if(res.status == 200){
                storage.setItem('roleList',JSON.stringify(res.data.list))
                $scope.groups = transSidebarData.trans(res.data.list)
            }else{
                storage.setItem('roleList','[]')
                $scope.groups = []
            }
        })
    }

    /**
     * 刷新后，获取左导列表
     */
    if(!!Session.userCode){//&& $location.path().indexOf("login") == -1
        $scope.getSidebar();
    }

}]);
/**
 * Created by zhangchuanliang on 2016/6/17.
 */
appControllers.controller("dashbordCtrl",["$scope", "$location", "$rootScope", "transSidebarData", "sidebarList", function($scope, $location, $rootScope, transSidebarData, sidebarList){
    //console.log(transSidebarData.trans(sidebarList));
}]);
/**
 * Created by xuming
 */
appControllers.controller("roleApplyCtrl",["$scope", "$location", "$rootScope", "AUTH_EVENTS", "AuthService", "promiseService", "Session", "$uibModal", "DOMAIN", function($scope, $location, $rootScope, AUTH_EVENTS, AuthService,promiseService,Session,$uibModal,DOMAIN){
    
	console.log('角色申请页面3');


    //从appServices获取userCode、userName、userRole。
    var userCode = Session.userCode;
    var userName = Session.userName;
    var userRole = Session.userRole;

    var jsonObj = { 
        "token": userCode, 
        "roleids": '-1'
    } 

    //角色对象数组
    var newData =[{
        group: "none",
        label: "角色",
        desc: "角色说明",
        value: "-1"
    }];

    $scope.user = userName;
    //chosen初始设置
    $scope.chosendata = newData;
    //初始角色说明
    $scope.desc = '角色说明';

    //解析数据
    function parseData(arr){
        var newArr = [];
        for(var i=0;i<arr.length;i++){
            newArr.push({
                'group':"none",
                'label':arr[i].role_name,
                'desc':arr[i].role_desc,
                'value':arr[i].id
            });
        }
        return newArr;
    }

    //chosen事件
    $scope.$on('chosenChange', function(e, label, value) {
        jsonObj.roleids = value;
        for(var i=0;i<newData.length;i++){
           if(newData[i].value == value){
               $scope.desc = newData[i].desc;
           }
        }
    })
	
	//获取角色
	promiseService.ajax('/api/v1.0/roles',"GET").then(function(res){
        if(res.status == 200 && res.data.code == 200){
            var list = res.data.list;
            newData = newData.concat(parseData(list))
            $scope.chosendata = newData;
            $scope.desc = newData[0].desc;
        }
	});
	
    //点击提交
    $scope.mySubmit = function(event){
        //提交
        promiseService.ajax('/api/v1.0/roles/apply',"POST", jsonObj).then(function(res){
            console.log(res);
            if(res.code == 200){
                concole.log(res.msg);
            }
        });
    };


}]);
























/**
 * Created by xuming
 * 权限管理-用户
 */

appControllers.controller("dataAuthorityManageCtrl",["$scope", "$location", "$rootScope", "AUTH_EVENTS", "AuthService", "promiseService", "Session", "modalFactory", function($scope, $location, $rootScope, AUTH_EVENTS, AuthService,promiseService,Session,modalFactory){
    
	console.log('权限管理-数据');

    console.log(modalFactory);
    //modalFactory.tips('200','hhaha');

    modalFactory.open({
        scope: $scope,
        option: {
            title: '提示',
            formName: 'createSiteForm',
            content:'<div class="form-style">123</div>'
        },
        controller: {
            ok: function(){
                alert(123)
            }
        }
    });



}]);
























/**
 * Created by Administrator on 2016/1/27.
 */
appControllers.controller("homeCtrl",["$scope", "$location", "$rootScope", "AUTH_EVENTS", "AuthService", function($scope, $location, $rootScope, AUTH_EVENTS, AuthService){

    l('我是首页哈');


}]);
/**
 * Created by Administrator on 2016/1/27.
 */
appControllers.controller("loginCtrl",["$scope", "$location", "$rootScope", "AUTH_EVENTS", "AuthService", function($scope, $location, $rootScope, AUTH_EVENTS, AuthService){

    l(123123);

    $scope.user = {
        username: "",
        password: ""
    };
    $scope.error = {
        isHave: false,
        msg: ""
    };

    //console.log($scope);
    $scope.login = function(event){
        var $element = event.target[3];
        $element.value="登录中...";
        AuthService.login($scope.user).then(function (req) {
            if(req.code == 200){
                //console.log(req);
                $rootScope.$broadcast(AUTH_EVENTS.loginSuccess);
                //$rootScope.username = req.real_name;
                $scope.error.isHave = false;
            }else{
                //$rootScope.$broadcast(AUTH_EVENTS.loginFailed);
                $scope.error = {
                    isHave: true,
                    msg: req.msg
                };
            }
            $element.value="登录";
        }, function (req) {
            $scope.error = {
                isHave: true,
                msg: req.msg
            };
        });
    };

}]);
angular.module('xmApp.controllers')
    .controller('myModalCtrl', ["$scope", "$uibModalInstance", "items", function($scope, $uibModalInstance, items) {
        
    }])

/**
 * Created by zhangchuanliang on 2016/6/20.
 */
appControllers.controller("requirementCtrl",["$scope", "$location", "$rootScope", "AUTH_EVENTS", "AuthService", "promiseService", "transformDataService", function($scope, $location, $rootScope, AUTH_EVENTS, AuthService, promiseService,transformDataService){
    $scope.title= "需求管理";

    $scope.params = {
        template_id: "",
        cycle: "",
        status: "",
        page: 1
    };

    $scope.pagination = {
        maxSize: 5,
        currentPage: $scope.params.page,
        totalItems: 0,
        perPage: $scope.params.page_size,
        setPage: function(page) {
            $scope.params.page = page;
            $scope.getTableData();
        },
        sizeChange: function (label,value) {
            if($scope.params.page_size == value[0])return;
            $scope.params.page_size = value[0];
            $scope.pagination.perPage = value[0];
            $scope.params.page = 1;
            $scope.pagination.currentPage = 1;
            $scope.getTableData();
        }
    };

    $scope.template = {
        items: [
            {
                group: 'none',
                label: '自定义任务',
                value: 0
            },{
                group: 'none',
                label: '模型任务',
                value: 1
            }
        ],
        selected: [$scope.params.template_id],
        change: function(label,value){
            if($scope.params.template_id == value[0])return;
            this.selected = value[0];
            $scope.params.template_id = value[0];
            $scope.getTableData();
        }
    };
    $scope.cycle = {
        items: [
            {
                group: 'none',
                label: '一次性',
                value: 0
            },{
                group: 'none',
                label: '长期',
                value: 1
            }
        ],
        selected: [$scope.params.cycle],
        change: function(label,value){
            if($scope.params.cycle == value[0])return;
            this.selected = value[0];
            $scope.params.cycle = value[0];
            $scope.getTableData();
        }
    };
    $scope.status = {
        items: [
            {
                group: 'none',
                label: '未审核',
                value: 0
            },{
                group: 'none',
                label: '已审核',
                value: 1
            },
            {
                group: 'none',
                label: '已退回',
                value: 2
            },{
                group: 'none',
                label: '已完成',
                value: 3
            },
            {
                group: 'none',
                label: '已关闭',
                value: 4
            }
        ],
        selected: [$scope.params.status],
        change: function(label,value){
            if($scope.params.status == value[0])return;
            this.selected = value[0];
            $scope.params.status = value[0];
            $scope.getTableData();
        }
    };

    var templateTPL = '<div chosen-directive chosen-data="tableFn.template.items" change-function="tableFn.template.change"></div>',
        cycleTPL    = '<div chosen-directive chosen-data="tableFn.cycle.items" change-function="tableFn.cycle.change"></div>',
        statusTPL   = '<div chosen-directive chosen-data="tableFn.status.items" change-function="tableFn.status.change"></div>';
    $scope.tableData = {
        data: {
            thData: [[{value:"需求名称",width:"10%"},{value:"需求内容",width:"10%"},{value:templateTPL,width:"20%"},{value:cycleTPL,width:"15%"},{value:"更新时间",width:"10%"},{value:"进度",width:"15%"},{value:statusTPL,width:"10%"},{value:"操作",width:"15%"}]],
            array : false,
            tdData: "数据加载中……"
        },
        fun: {
            template : {
                items: [
                    {
                        group: 'none',
                        label: '任务',
                        value: ""
                    },
                    {
                        group: 'none',
                        label: '自定义任务',
                        value: 0
                    },{
                        group: 'none',
                        label: '模型任务',
                        value: 1
                    }
                ],
                selected: [$scope.params.template_id],
                change: function(label,value){
                    if($scope.params.template_id == value[0])return;
                    this.selected = value[0];
                    $scope.params.template_id = value[0];
                    $scope.getTableData();
                }
            },
            cycle : {
                items: [
                    {
                        group: 'none',
                        label: '周期',
                        value: ""
                    },
                    {
                        group: 'none',
                        label: '一次性',
                        value: 0
                    },{
                        group: 'none',
                        label: '长期',
                        value: 1
                    }
                ],
                selected: [$scope.params.cycle],
                change: function(label,value){
                    if($scope.params.cycle == value[0])return;
                    this.selected = value[0];
                    $scope.params.cycle = value[0];
                    $scope.getTableData();
                }
            },
            status : {
                items: [
                    {
                        group: 'none',
                        label: '状态',
                        value: ""
                    },
                    {
                        group: 'none',
                        label: '未审核',
                        value: 0
                    },{
                        group: 'none',
                        label: '已审核',
                        value: 1
                    },
                    {
                        group: 'none',
                        label: '已退回',
                        value: 2
                    },{
                        group: 'none',
                        label: '已完成',
                        value: 3
                    },
                    {
                        group: 'none',
                        label: '已关闭',
                        value: 4
                    }
                ],
                selected: [$scope.params.status],
                change: function(label,value){
                    if($scope.params.status == value[0])return;
                    this.selected = value[0];
                    $scope.params.status = value[0];
                    $scope.getTableData();
                }
            }
        }
    }

    $scope.getTableData = function () {
        promiseService.ajax("/api/v1.0/requirements/","get",$scope.params).then(function(res){
            $scope.tableData.data.array = true;
            var aOperator = "";
            var options = {
                list: res.data.requirements,
                keys: ["name",'content','template','cycle','create_time','progress','status',aOperator]// 展示内容对应的字段，如果是html标签，则直接push到数组
            };
            $scope.tableData.data.tdData = transformDataService.trans(options);
            $scope.pagination.totalItems = res.data.cont;
        });
    }

    function init(){
        $scope.getTableData()
    }
    init();
}]);
/**
 * Created by xuming
 */
appControllers.controller("roleApplyCtrl",["$scope", "$location", "$rootScope", "AUTH_EVENTS", "AuthService", "promiseService", "Session", "$uibModal", "DOMAIN", "modalFactory", function($scope, $location, $rootScope, AUTH_EVENTS, AuthService,promiseService,Session,$uibModal,DOMAIN,modalFactory){
    
	console.log('角色申请页面3');


    //从appServices获取userCode、userName、userRole。
    var userCode = Session.userCode;
    var userName = Session.userName;
    var userRole = Session.userRole;

    var jsonObj = { 
        "token": userCode, 
        "roleids": '-1'
    } 

    //角色对象数组
    var newData =[{
        group: "none",
        label: "角色",
        desc: "角色说明",
        value: "-1"
    }];

    $scope.user = userName;
    //chosen初始设置
    $scope.chosendata = newData;
    //初始角色说明
    $scope.desc = '角色说明';

    //解析数据
    function parseData(arr){
        var newArr = [];
        for(var i=0;i<arr.length;i++){
            newArr.push({
                'group':"none",
                'label':arr[i].role_name,
                'desc':arr[i].role_desc,
                'value':arr[i].id
            });
        }
        return newArr;
    }

    //chosen事件
    $scope.$on('chosenChange', function(e, label, value) {
        jsonObj.roleids = value;
        for(var i=0;i<newData.length;i++){
           if(newData[i].value == value){
               $scope.desc = newData[i].desc;
           }
        }
    })
	
	//获取角色
	promiseService.ajax('/api/v1.0/roles',"GET").then(function(res){
        if(res.status == 200 && res.data.code == 200){
            var list = res.data.list;
            newData = newData.concat(parseData(list))
            $scope.chosendata = newData;
            $scope.desc = newData[0].desc;
        }
	});
	
    $scope.activeBtn=false;
    //点击提交
    $scope.mySubmit = function(event){
        if(jsonObj.roleids=='-1'){
            //弹框
            modalFactory.open({
                scope: $scope,
                option: {
                    title: '提示',
                    formName: 'createSiteForm',
                    content:'<div class="form-style">'+
                                '请选择需要申请的角色'+
                            '</div>'
                },
                controller: {
                    ok: function(){
                    }
                }
            });
            return;
        }
        //提交
        $scope.activeBtn=true;
        promiseService.ajax('/api/v1.0/roles/apply',"POST", jsonObj).then(function(res){
            $scope.activeBtn=false;
            if(res.status == 200){
                //弹框
                modalFactory.open({
                    scope: $scope,
                    option: {
                        title: '提示',
                        formName: 'createSiteForm',
                        content:'<div class="tipsPop"><span class="succesImg"></span><span class="infTips">您的权限申请已提交，审批结果将以邮件的方式回复您，请耐心等待，谢谢！</span><br><br></div>'
                    },
                    size:'small',
                    controller: {
                        ok: function(){
                        
                        }
                    }
                });
            }
        });

    };




}]);
























/**
 * Created by xuming
 * 权限管理-用户
 */

appControllers.controller("roleAuthorityManageCtrl",["$scope", "$location", "$rootScope", "AUTH_EVENTS", "AuthService", "promiseService", "Session", function($scope, $location, $rootScope, AUTH_EVENTS, AuthService,promiseService,Session){
    
	console.log('权限管理-用户');

    //从appServices获取userCode、userName、userRole。
    var userCode = Session.userCode;
    var userName = Session.userName;
    var userRole = Session.userRole;

    var jsonObj = { 
        "token": userCode, 
        "roleids": '-1'
    } 

    //角色对象数组
    var newData =[];

    //解析数据
    function parseData(arr){
        var newArr = [];
        for(var i=0;i<arr.length;i++){
            newArr.push({
                'group':"none",
                'label':arr[i].role_name,
                'desc':arr[i].role_desc,
                'value':arr[i].id
            });
        }
        return newArr;
    }

    //获取角色
    promiseService.ajax('/api/v1.0/roles',"GET").then(function(res){
        if(res.status == 200 && res.data.code == 200){
            var list = res.data.list;
            newData = newData.concat(parseData(list))
            $scope.records = newData;
            console.log(newData);
        }
    });

    //点击提交
    $scope.mySubmit = function(event){
        var roleids = "";
        //获取选中的值，组合成字符串
        
        jsonObj.roleids = roleids;
        //提交
        promiseService.ajax('/api/v1.0/roles/apply',"POST", jsonObj).then(function(res){
            console.log(res);
            if(res.code == 200){
                concole.log(res.msg);
            }
        });
    };


    $scope.myClick = function(item){
        //角色描述
        $scope.desc = item.desc;


        

        $scope.fromData={};
        console.log($scope.fromData.myRole)

        if($scope.fromData.myRole){
            var log = [];


            angular.forEach($scope.fromData.myRole,function(v){
                    if(v==true)
                        this.push(v);
            },log);
            console.log(log.length);//length
        }
    }

    $scope.tagcategories = [ 
        { 
          id: 1, 
          name: 'Color', 
          tags: [ 
            { 
              id:1, 
              name:'color1'
            }, 
            { 
              id:2, 
              name:'color2'
            }, 
            { 
              id:3, 
              name:'color3'
            }, 
            { 
              id:4, 
              name:'color4'
            }, 
          ] 
        }, 
        { 
          id:2, 
          name:'Cat', 
          tags:[ 
            { 
              id:5, 
              name:'cat1'
            }, 
            { 
              id:6, 
              name:'cat2'
            }, 
          ] 
        }, 
        { 
          id:3, 
          name:'Scenario', 
          tags:[ 
            { 
              id:7, 
              name:'Home'
            }, 
            { 
              id:8, 
              name:'Work'
            }, 
          ] 
        } 
      ]; 
      
      $scope.selected = []; 
      $scope.selectedTags = []; 
      
      var updateSelected = function(action,id,name){ 
        if(action == 'add' && $scope.selected.indexOf(id) == -1){ 
          $scope.selected.push(id); 
          $scope.selectedTags.push(name); 
        } 
        if(action == 'remove' && $scope.selected.indexOf(id)!=-1){ 
          var idx = $scope.selected.indexOf(id); 
          $scope.selected.splice(idx,1); 
          $scope.selectedTags.splice(idx,1); 
        } 
      } 
      
      $scope.updateSelection = function($event, id){ 
        var checkbox = $event.target; 
        var action = (checkbox.checked?'add':'remove'); 
        updateSelected(action,id,checkbox.name); 
      } 
      
      $scope.isSelected = function(id){ 
        return $scope.selected.indexOf(id)>=0; 
      } 

}]);
























/**
 * Created by Administrator on 2016/1/27.
 */
appControllers.controller("sidebarCtrl",["$scope", "$location", "$stateParams", "promiseService", function($scope, $location, $stateParams, promiseService){
    
}]);